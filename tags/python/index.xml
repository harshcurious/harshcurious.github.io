<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on harshcurious</title><link>https://harshcurious.com/tags/python/</link><description>Recent content in python on harshcurious</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 24 Dec 2021 12:04:10 +0530</lastBuildDate><atom:link href="https://harshcurious.com/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Some basic experiments with the pandas' append command</title><link>https://harshcurious.com/posts/pandas_append/</link><pubDate>Fri, 24 Dec 2021 12:04:10 +0530</pubDate><guid>https://harshcurious.com/posts/pandas_append/</guid><description>Understanding Commands: pandas.append() Basic Usage &amp;gt;&amp;gt;&amp;gt; import pandas as pd &amp;gt;&amp;gt;&amp;gt; df = pd.DataFrame([[1, 2], [3, 4]], columns=list(&amp;#39;AB&amp;#39;), index=[&amp;#39;x&amp;#39;, &amp;#39;y&amp;#39;]) &amp;gt;&amp;gt;&amp;gt; df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list(&amp;#39;AB&amp;#39;), index=[&amp;#39;x&amp;#39;, &amp;#39;y&amp;#39;]) &amp;gt;&amp;gt;&amp;gt; df.append(df2) A B x 1 2 y 3 4 x 5 6 y 7 8 &amp;gt;&amp;gt;&amp;gt; df A B x 1 2 y 3 4 &amp;gt;&amp;gt;&amp;gt; new = df.append(df2) &amp;gt;&amp;gt;&amp;gt; new A B x 1 2 y 3 4 x 5 6 y 7 8 &amp;gt;&amp;gt;&amp;gt; df A B x 1 2 y 3 4 &amp;gt;&amp;gt;&amp;gt; df2 A B x 5 6 y 7 8 &amp;gt;&amp;gt;&amp;gt; new.</description></item><item><title>Today I Learnt 10</title><link>https://harshcurious.com/posts/til10/</link><pubDate>Fri, 16 Apr 2021 15:36:34 +0530</pubDate><guid>https://harshcurious.com/posts/til10/</guid><description>Lambda Functions in Python First I looked at the following article from realpython.com History Lambda calculus (or $\lambda$-calculus) is a formal system in mathematical logic for expressing computation based on function abstraction and application using variable binding and substitution.1
It is a universal model of computation. Alternative to a Turing Machine.
Until the 1960s, the lambda calculus was only a formalism. Since Richard Montague and other linguists&amp;rsquo; applied it in understanding the semantics of natural language, the lambda calculus has gained popularity in both linguistics, and computer science.</description></item><item><title>What are Strings in Python</title><link>https://harshcurious.com/posts/pythonstrings/</link><pubDate>Sun, 07 Mar 2021 15:06:35 +0530</pubDate><guid>https://harshcurious.com/posts/pythonstrings/</guid><description>It&amp;rsquo;s a Sequence, a Sequence of Characters Can access the characters using the braket operator
&amp;gt;&amp;gt;&amp;gt; fruit = &amp;#39;banana&amp;#39; &amp;gt;&amp;gt;&amp;gt; letter = fruit[1] &amp;gt;&amp;gt;&amp;gt; print(letter) a You get that fruit[1] is a, the second letter in the string. Remeber counting starts from 0 in Python.
the number inside the bracket is called the index. Indeces can be negative. But index $\in [-length+1, length -1]$. len is the built-in function which gives the length of a string.</description></item><item><title>How to Iterate in Python</title><link>https://harshcurious.com/posts/pythoniteration/</link><pubDate>Thu, 04 Mar 2021 10:48:28 +0530</pubDate><guid>https://harshcurious.com/posts/pythoniteration/</guid><description>The while loop It allows you to repeat a set of actions until a statement is true. Eg:
n = 5 while n &amp;gt; 0: print(n) n = n - 1 print(&amp;#39;Blastoff!&amp;#39;) This is executed as follows
Creates and sets n to 5. Goes to the while statement and checks if n is greater than 0. Right now it&amp;rsquo;s true, so we move inside the loop. Prints n, ie outputs 5.</description></item><item><title>Learning Python: Functions</title><link>https://harshcurious.com/posts/pythonfunction/</link><pubDate>Wed, 03 Mar 2021 13:25:35 +0530</pubDate><guid>https://harshcurious.com/posts/pythonfunction/</guid><description>What is a Function A function takes a set of inputs and produces an output. Eg:
&amp;gt;&amp;gt;&amp;gt;type(32) &amp;lt;class &amp;#39;init&amp;#39;&amp;gt; Here type is a function that takes 32 as an input and produces its class.
Some Built-in functions max : gives the “largest character” in the string
&amp;gt;&amp;gt;&amp;gt;max(&amp;#39;Hello world&amp;#39;) &amp;#39;w&amp;#39; min : gives the “smallest character” in the string
&amp;gt;&amp;gt;&amp;gt;min(&amp;#39;Hello world&amp;#39;) &amp;#39; &amp;#39; len : gives the number of characters in the string</description></item></channel></rss>