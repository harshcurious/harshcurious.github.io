[{"content":"Today I am going to run a 7 segment display off of raspberry pi 4.\nThe code I ran #!/usr/bin/env python import RPi.GPIO as GPIO import time pins = [11,12,13,15,16,18,22,7] dats = [0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71,0x80] def setup(): GPIO.setmode(GPIO.BOARD) for pin in pins: GPIO.setup(pin, GPIO.OUT) # Set pin mode as output GPIO.output(pin, GPIO.LOW) def writeOneByte(val): GPIO.output(11, val \u0026amp; (0x01 \u0026lt;\u0026lt; 0)) GPIO.output(12, val \u0026amp; (0x01 \u0026lt;\u0026lt; 1)) GPIO.output(13, val \u0026amp; (0x01 \u0026lt;\u0026lt; 2)) GPIO.output(15, val \u0026amp; (0x01 \u0026lt;\u0026lt; 3)) GPIO.output(16, val \u0026amp; (0x01 \u0026lt;\u0026lt; 4)) GPIO.output(18, val \u0026amp; (0x01 \u0026lt;\u0026lt; 5)) GPIO.output(22, val \u0026amp; (0x01 \u0026lt;\u0026lt; 6)) GPIO.output(7, val \u0026amp; (0x01 \u0026lt;\u0026lt; 7)) def loop(): while True: for dat in dats: writeOneByte(dat) time.sleep(0.5) def destroy(): for pin in pins: GPIO.output(pin, GPIO.LOW) GPIO.cleanup() # Release resource if __name__ == \u0026#39;__main__\u0026#39;: # Program start from here setup() try: loop() except KeyboardInterrupt: # When \u0026#39;Ctrl+C\u0026#39; is pressed, the child program destroy() will be executed. destroy() Here is the thing, I just copied this code which was given to me. I don\u0026rsquo;t know what this means. Specifically, the dats stuff. So let me just run and see if this works. Here is the circuit I made.\nRemark: the 220 $ \\Omega $ resistor is connected to power in case that is not clear.\nIt works üòÖ . Let\u0026rsquo;s carry on and celebrate with a few üì∑ .\nNow that I have calmed down a little bit, let me look at the mysterious bit of code. From what\u0026rsquo;s happening I know that the code switches the leds in the 7-segment display so that we loop through 0 to 9 and A to F and then 0 again. The display changes every 0.5 seconds.\nTime for google üîç . Found it üôå. Let me rewrite the explanation in my own way.\nWhat Was that Code The parts that I didn\u0026rsquo;t understand were 0x3f-like objects and the operation \u0026lt;\u0026lt;.\nLet me first understand 0x3f. Upon googling I found this on the wikipedia page of 7-segment display. This is the hexadecimal code for 0b00111111 binary code.\n   Display Hex binary     0 0x3f 0b 00111111   1 0x06 0b 00000110   2 0x5b 0b 01011011   3 0x4f 0b 01001111   4 0x66 0b 01100110   5 0x6d 0b 01101101   6 0x7d 0b 01111101   7 0x07 0b 00000111   8 0x7f 0b 01111111   9 0x6f 0b 01101111   A 0x77 0b 01110111   b 0x7c 0b 01111100   C 0x39 0b 00111001   d 0x5e 0b 01011110   E 0x79 0b 01111001   F 0x71 0b 01110001   . 0x80 0b 10000000    When I look at the python documentation x \u0026lt;\u0026lt; y is a bitwise operation. And what it does is it returns x with the bits shifted to the left by y units (and new bits on the right-hand-side are zeros). At the same link I saw that x \u0026amp; y is the bitwise and. Each bit of the output is 1 if the corresponding bit of x AND of y is 1, otherwise it\u0026rsquo;s 0. Let me look at a few examples.\n\u0026gt;\u0026gt;\u0026gt; bin(0x01) \u0026#39;0b1\u0026#39; \u0026gt;\u0026gt;\u0026gt; bin(0x01 \u0026lt;\u0026lt; 0) \u0026#39;0b1\u0026#39; \u0026gt;\u0026gt;\u0026gt; bin(0x01 \u0026lt;\u0026lt; 1) \u0026#39;0b10\u0026#39; \u0026gt;\u0026gt;\u0026gt; bin(0x01 \u0026lt;\u0026lt; 2) \u0026#39;0b100\u0026#39; \u0026gt;\u0026gt;\u0026gt; bin(0x06) \u0026#39;0b110\u0026#39; \u0026gt;\u0026gt;\u0026gt; bin(0x06 \u0026lt;\u0026lt; 3) \u0026#39;0b110000\u0026#39; \u0026gt;\u0026gt;\u0026gt; bin(0b00111111 \u0026amp; 0b00000001) \u0026#39;0b1\u0026#39; \u0026gt;\u0026gt;\u0026gt; bin(0b00111111 \u0026amp; 0b00010001) \u0026#39;0b10001\u0026#39; \u0026gt;\u0026gt;\u0026gt; bin(0b10111111 \u0026amp; 0b10010001) \u0026#39;0b10010001\u0026#39; I think this makes these operations clear to me. In case of x\u0026lt;\u0026lt;y you add y number of zeros to the binary form of x. x \u0026amp; y looks at the binary form of x and y and performs the and operation on every bit.\nTo understand waht is happening I have to look at the circuit I have made. I notice that pin 11 (using the raspberry pi board convention) is connected to the pin ?? on the 7-segment display. Now let\u0026rsquo;s look at this statement of the code.\ndef writeOneByte(val): GPIO.output(11, val \u0026amp; (0x01 \u0026lt;\u0026lt; 0)) GPIO.output(12, val \u0026amp; (0x01 \u0026lt;\u0026lt; 1)) GPIO.output(13, val \u0026amp; (0x01 \u0026lt;\u0026lt; 2)) GPIO.output(15, val \u0026amp; (0x01 \u0026lt;\u0026lt; 3)) GPIO.output(16, val \u0026amp; (0x01 \u0026lt;\u0026lt; 4)) GPIO.output(18, val \u0026amp; (0x01 \u0026lt;\u0026lt; 5)) GPIO.output(22, val \u0026amp; (0x01 \u0026lt;\u0026lt; 6)) GPIO.output(7, val \u0026amp; (0x01 \u0026lt;\u0026lt; 7)) If I also look at how the loop() function is running, at any moment, val is an element in the list dats. Let\u0026rsquo;s consider the first case of val = 0x3f. What will be the output of val \u0026amp; (0x01 \u0026lt;\u0026lt; 0)? This is the same as 0x3f \u0026amp; (0x01 \u0026lt;\u0026lt; 0). I am going to run it on python.\n\u0026gt;\u0026gt;\u0026gt; bin(0x3f \u0026amp; (0x01 \u0026lt;\u0026lt; 0)) \u0026#39;0b1\u0026#39; ","permalink":"https://harshcurious.com/posts/rpi20thmarch21/","summary":"Today I am going to run a 7 segment display off of raspberry pi 4.\nThe code I ran #!/usr/bin/env python import RPi.GPIO as GPIO import time pins = [11,12,13,15,16,18,22,7] dats = [0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71,0x80] def setup(): GPIO.setmode(GPIO.BOARD) for pin in pins: GPIO.setup(pin, GPIO.OUT) # Set pin mode as output GPIO.output(pin, GPIO.LOW) def writeOneByte(val): GPIO.output(11, val \u0026amp; (0x01 \u0026lt;\u0026lt; 0)) GPIO.output(12, val \u0026amp; (0x01 \u0026lt;\u0026lt; 1)) GPIO.output(13, val \u0026amp; (0x01 \u0026lt;\u0026lt; 2)) GPIO.","title":"My Experiments with Raspberry Pi: Part 1"},{"content":"The most surprizing aspect of neural networks is their simplicity. I don\u0026rsquo;t mean that the whole of a neural network is simple. It is not. But at any given instant you are either adding numbers or applying a function on one number (a single variable function). Why these two kinds of operations will give you any old function of multiple variables is a mystry to me! Let me take a small step towards understanding this by reading this really old paper by Kolmogrov. This paper is in Russian, I found an English translation here. For more on the mathematical history of the problem look at the Wikiedia page on Kolmogorov-Arnold representation theorem (or superposition theorem). Essentially, this paper is important because it solves the Hilbert\u0026rsquo;s 13th problem for continous functions.\n","permalink":"https://harshcurious.com/posts/mathneuralnetwork/","summary":"The most surprizing aspect of neural networks is their simplicity. I don\u0026rsquo;t mean that the whole of a neural network is simple. It is not. But at any given instant you are either adding numbers or applying a function on one number (a single variable function). Why these two kinds of operations will give you any old function of multiple variables is a mystry to me! Let me take a small step towards understanding this by reading this really old paper by Kolmogrov.","title":"Kolmogorov Arnold Representation Theorem"},{"content":"Why Go?  Computer evolution  more cores programming languages based on one core programming   Programming workflow evolution  not written by single developer written at different times programmers write library or package to be used elsewhere open source code needs to be shared   Go  rethinks object-oriented development allows for code reuse let\u0026rsquo;s you use all cores no need to recompile evrytime.   Learn  concurrency model fast compiler syntax type system concurrency channels testing, etc    How Modern programming challenges Go away  Currently choice between  rapid development : Ruby, python fast execution : C, C++.   Go offers both simultaneously. Also, concise syntax : few keywords Compiler : less build time. Built-in concurrency: no special threading libraries. Type system: less overhead; more reusability  How is the compiler Go-ing?  Quick compiles by  smart compiling simplified dependency resolution algorithm only looks at the libraries directly used not all dependencies of all libraries included in the dependency chain.       Dynamic languages Static languages     Types checked on the fly, during execution Types checked before run-time   Less verbose Better code completion   Easier to make change; no wait for recompilation Allows compiler optimization   Less More searchable   Difficult to work with other type based systems Easier to work with other systems (that rely on ststic type) like relational databases   Fewer syntax and semantic errors Easier to catch type errors   Eg: Perl, Python, JS C, C++, Java, Go, Rust     Go is a static language  compiler catches type differences easier to catch type errors    Concurrency  Difficult to be efficient in hardware utilization Others need thread synchronization code, prone to errors Strongest feature Gorutines  like threads, use less memory and code   Channels  data structue lets you send typed messages between goroutines syncronization built-in   Model where you  send data between goroutines goroutines don\u0026rsquo;t fight for same data.    goroutines  functions that run simultaneously Many goroutines can run on a single thread For example, a web server that can handle multiple web requsts.  In Go, the net/http library has concurrency built-in using goroutines. In C/Java, need extra code to use threading   Use less memory than threads. Go runtime automatically schedules execution of goroutines  An example of goroutine:\nfunc log(msg string){ ... some logging code here } // Elsewhere in our code after we\u0026#39;ve discovered an error. go log(\u0026#34;something dire happened\u0026#34;) Here the keyword go runs the log function as a goroutine. You can execute the rest of the program while the logging happened.\n No overhead so there can be thousands of them.  Channels  Data structure that enable safe data communication between goroutines. Hardest aspect of concurrency: data isn\u0026rsquo;t unexpectedly modified by concurrently running threads, processes, or goroutines. Other languages make it hard to have syncronized changes. Channels ensure only one goroutine modifies data at any time. Exchange of data between goroutines is synchronized and both goroutines know that the exchange took place. Channels don\u0026rsquo;t provide data access protection between goroutines.  If copies are exchanged through a channel, then it\u0026rsquo;s fine. If pointers to the data are exchanged, then each goroutine needs to be syncronized if different goroutines are performing read/write actions.    Type System ####There are three layers here:\n To define a new type, all you need to do is use existing types and add new methods. This is type composition. But these new methods, in terms of application, are no different from the inherited methods. This is called duck typing. \u0026ldquo;If it looks like a duck, and it quacks like a duck, it is a duck\u0026rdquo; (for all intent and purposes). The link that makes it click for me is this link. Essentially the idea is you can call len() on any Python object that defines a .__len__() method. So you don\u0026rsquo;t need to know if the object is str, list, dict, or a userdefined one, (or through inheretence in go). You model behaviour not model type. You don\u0026rsquo;t declare you are implementing an interface. Compiler does the work of checking if your type satify the interface you are using. This the simple interface feature in Go.  ErGo Memory Management  Has modern garbage collector. Don\u0026rsquo;t need to allocate and free memory like C or C++. Using this with threading and heavy concurrency is tedious. Go does this for you.  Worst part of the book Avoids teaching you how to code on your device. How can you tell me to code entirely online. Come on!\n","permalink":"https://harshcurious.com/posts/gointro/","summary":"Why Go?  Computer evolution  more cores programming languages based on one core programming   Programming workflow evolution  not written by single developer written at different times programmers write library or package to be used elsewhere open source code needs to be shared   Go  rethinks object-oriented development allows for code reuse let\u0026rsquo;s you use all cores no need to recompile evrytime.   Learn  concurrency model fast compiler syntax type system concurrency channels testing, etc    How Modern programming challenges Go away  Currently choice between  rapid development : Ruby, python fast execution : C, C++.","title":"Let's get Go-ing"},{"content":"Foreward  Created by Rob Pike, Robert Griesmier, and Ken Thompson  other contributions include UNIX, Java\u0026rsquo;s JVM Hotspot, Strontalk, UTF8   Open-sourse 2013: Gopher Academy; building community around Go.  Go discussion board (slack) Gopher Academy blog GopherCon Go In Action    Preface  Began as GoingGo.net blog Member of founding team of Go  reviewed suggested changes shared expertise   Community effort ever scince  About the Book  Go is  simple makes  simple reliable and efficient software   ides from existing languages unique and simple balances  low-level language features, and high-level language features     Book  For intermediate level Requires experince with programming Goal  intensive comprehensive idiomatic   Focus on both  specification, around implementation   Topics include:  syntax type system concurrency channel testing, etc     Overview:  Chapter 1  What is Go? Why created? What Go does Intro to concurrency theoretical intro   Chapter 2  walkthrough one program practical intro   Chapter 3  packaging How to set up Go workflow? tooling  fetching building code     Chapter 4  What are the built-in data types? their implementation and mechanics   Chapter 5  What\u0026rsquo;s the type system? How to structure and write complex software?   Chapter 6  What is  scheduler concurrency channels   Mechanics   Chapter 7  How to  use concurrency? implement gorutine pools pool reusable resources     Chapter 8  What\u0026rsquo;s in the standard library? Deep into  log json io     Chapter 9  How to use  testing, and benchmarking   Specifically how to  write unit and table tests and benchmarks add examples to documentation use examples as tests       Code  Available at github    Overall, I like the style of the book. I am gonna give it a Go üòí\n","permalink":"https://harshcurious.com/posts/gofirstlook/","summary":"Foreward  Created by Rob Pike, Robert Griesmier, and Ken Thompson  other contributions include UNIX, Java\u0026rsquo;s JVM Hotspot, Strontalk, UTF8   Open-sourse 2013: Gopher Academy; building community around Go.  Go discussion board (slack) Gopher Academy blog GopherCon Go In Action    Preface  Began as GoingGo.net blog Member of founding team of Go  reviewed suggested changes shared expertise   Community effort ever scince  About the Book  Go is  simple makes  simple reliable and efficient software   ides from existing languages unique and simple balances  low-level language features, and high-level language features     Book  For intermediate level Requires experince with programming Goal  intensive comprehensive idiomatic   Focus on both  specification, around implementation   Topics include:  syntax type system concurrency channel testing, etc     Overview:  Chapter 1  What is Go?","title":"First look at Go In Action"},{"content":"What is Microsoft Terminal? ","permalink":"https://harshcurious.com/posts/microsoftterminal/","summary":"What is Microsoft Terminal? ","title":"Microsoft Terminal: My Customizations"},{"content":"It\u0026rsquo;s a Sequence, a Sequence of Characters   Can access the characters using the braket operator\n\u0026gt;\u0026gt;\u0026gt; fruit = \u0026#39;banana\u0026#39; \u0026gt;\u0026gt;\u0026gt; letter = fruit[1] \u0026gt;\u0026gt;\u0026gt; print(letter) a You get that fruit[1] is a, the second letter in the string. Remeber counting starts from 0 in Python.\n the number inside the bracket is called the index. Indeces can be negative. But index $\\in [-length+1, length -1]$.    len is the built-in function which gives the length of a string.\n\u0026gt;\u0026gt;\u0026gt; fruit = \u0026#39;banana\u0026#39; \u0026gt;\u0026gt;\u0026gt; len(fruit) 6   How to travese through a string:   while loop:\nindex = 0 while index \u0026lt; len(fruit): letter = fruit[index] print(letter) index = index + 1   for loop:\nfor char in fruit: print(char)   How to slice a string? \u0026gt;\u0026gt;\u0026gt; s = \u0026#39;Monty Python\u0026#39; \u0026gt;\u0026gt;\u0026gt; print(s[0:5]) Monty \u0026gt;\u0026gt;\u0026gt; print(s[6:12]) Python \u0026gt;\u0026gt;\u0026gt; print(s[:3]) Mon \u0026gt;\u0026gt;\u0026gt; print(s[3:]) ty Python \u0026gt;\u0026gt;\u0026gt; print(s[3:3]) \u0026#39;\u0026#39; \u0026gt;\u0026gt;\u0026gt; print(s[:]) Monty Python What\u0026rsquo;s imutable about \u0026lsquo;em\u0026rsquo;?  try this: \u0026gt;\u0026gt;\u0026gt; greeting = \u0026#39;Hello, world!\u0026#39; \u0026gt;\u0026gt;\u0026gt; greeting[0] = \u0026#39;J\u0026#39; TypeError: \u0026#39;str\u0026#39; object does not support item assignment  you get an error because strings are immutable, ie they can\u0026rsquo;t be changed. instead you need to create a new string: \u0026gt;\u0026gt;\u0026gt; new_greeting = \u0026#39;J\u0026#39; + greeting[1:] \u0026gt;\u0026gt;\u0026gt; print(new_greeting) Jello, world!   Fighting for equality:   if word == \u0026#39;banana\u0026#39;: print(\u0026#39;All right, bananas.\u0026#39;) this checks if the string word is exactly the string banana.\n  if word \u0026lt; \u0026#39;banana\u0026#39;: print(\u0026#39;Your word,\u0026#39; + word + \u0026#39;, comes before banana.\u0026#39;) this checks the alphabetical order among strings.\n  All the uppercase letters come before all the lowercase letters\n  Are strings Python objects? What\u0026rsquo;s an object?   Strings are objects\n  Object contains two things\n data methods : functions built into objects and available to any instance    The dir shows avilable methods associated with the object   Methods have a different syntax:   Some string methods :   str.upper() : as shown above, return copy by turning all characters into uppercase.\n  str.capitalize() : returns copy with first character capitalized and the rest lowercased\n  str.casefold : removes all case distictions; umlauts, etc removed\n  str.count(sub[, start[, end]]) : Returns the number of non-overlapping occurrences of substring sub in the range $[start, end]$\n  str.find(sub[, start[, end]]) : Returns the lowest index in the string where substring sub is found within the slice $s[start:end]$. Returns -1 if sub is not found.\n  in operator (not a method):\n\u0026gt;\u0026gt;\u0026gt; \u0026#39;Py\u0026#39; in \u0026#39;Python\u0026#39; True   str.endswith(suffix[, start[, end]]) : Returns True if the string ends with the specified suffix, otherwise return False. suffix can also be a tuple of suffixes to look for.\n  str.format(*args, **kwargs) : replaces elements in {} with a string value. Eg\n\u0026gt;\u0026gt;\u0026gt; \u0026#34;The sum of 1 + 2 is {0}\u0026#34;.format(1+2) \u0026#39;The sum of 1 + 2 is 3\u0026#39; This is a relatively new inclusion to Python. More details later.\n  str.index(sub[, start[, end]]) : like find(), but returns ValueError when substring is not found.\n  str.isdigit() : returns True if all characters are digits and at least one character, False otherwise. Digits include decimals and special ones (like non-base 10 and superscript ones).\n  str.join(iterable) : Returns a string which is a concatenation of strings in iterable. Error TypeError if there is a non-string value in iterable.\n  str.partition(sep) : Splits the string at the first occurence of sep and returns a 3-tuple containing the part before separator, the seperator, and the part after separator.\n  str.replace(old,new[,count]) : Returns a copy of str with all occurances of old replaced by new. If count is provided then only the first count-number of replacements are held.\n  str.split(sep=None, maxsplit=-1) : Returns a list of words in the string, all of which are separated by sep. The defaults separates whitespace characters.\n  str.startswith : Like endswith(), but checks for prefix.\n  str.strip([chars]) : Returns a copy of the string with the leading and trailing characters removed. By default it removes the whitespaces at the begining and end of the string.\n  Parsing Strings Exercises My solutions:\n  fruit = \u0026#39;banana\u0026#39; index = len(fruit) while index \u0026gt; 0: print(fruit[index -1]) index = index - 1 Here in the first statement of the while loop I combined two statement and it works.\n   def countletter(word, char): count = 0 for letter in word: if letter == char: count = count + 1 print(count) word = input(\u0026#39;Word: \u0026#39;) char = input(\u0026#39;Letter to count: \u0026#39;) countletter(word, char)    ","permalink":"https://harshcurious.com/posts/pythonstrings/","summary":"It\u0026rsquo;s a Sequence, a Sequence of Characters   Can access the characters using the braket operator\n\u0026gt;\u0026gt;\u0026gt; fruit = \u0026#39;banana\u0026#39; \u0026gt;\u0026gt;\u0026gt; letter = fruit[1] \u0026gt;\u0026gt;\u0026gt; print(letter) a You get that fruit[1] is a, the second letter in the string. Remeber counting starts from 0 in Python.\n the number inside the bracket is called the index. Indeces can be negative. But index $\\in [-length+1, length -1]$.    len is the built-in function which gives the length of a string.","title":"What are Strings in Python"},{"content":"The while loop It allows you to repeat a set of actions until a statement is true. Eg:\nn = 5 while n \u0026gt; 0: print(n) n = n - 1 print(\u0026#39;Blastoff!\u0026#39;) This is executed as follows\n Creates and sets n to 5. Goes to the while statement and checks if n is greater than 0. Right now it\u0026rsquo;s true, so we move inside the loop.  Prints n, ie outputs 5. Reduces n by 1, ie n is now 4   Goes back to the while statement  Checks if n is still greater than 0. It is, so we again move inside the while loop. Prints 4. Reduces n by 1.   Goes back to the while statement  \u0026hellip; \u0026hellip;   This goes on until n = 0. When this happens, we exit the while loop and go to the statement after that which is print('Blastoff'). So the probram outputs Blastoff and ends.  Infinite loops Don\u0026rsquo;t write infinite loops. Eg:\nLather, rinse, repeat or\nn = 10 while n \u0026lt; 20: print(n, end=\u0026#39; \u0026#39;) n = n - 1 print(\u0026#39;Done!\u0026#39;) break statement We still sometimes use infinite loops with the break statement for more complicated testing conditions. A simpler example is\nwhile True: line = input(\u0026#39;\u0026gt; \u0026#39;) if line == \u0026#39;done\u0026#39;: break print(line) print(\u0026#39;Done!\u0026#39;) # Code: http://www.py4e.com/code3/copytildone1.py Here the loop runs repeatedly until it hits the break statement when the user inputs done.\ncontinue statement This one ends the current iteration and makes it move onto the next iteration of the loop. The loop still goes on. Eg:\nwhile True: line = input(\u0026#39;\u0026gt; \u0026#39;) if line[0] == \u0026#39;#\u0026#39;: continue if line == \u0026#39;done\u0026#39;: break print(line) print(\u0026#39;Done!\u0026#39;) # Code: http://www.py4e.com/code3/copytildone2.py An iteration ends if the the first letter of the input is #. A sample output is :\nThe for Loop  We use this when we want to loop inside a set. The set could be a list of words , lines in a file or a list of numbers.  Eg:\nfriends = [\u0026#39;Joseph\u0026#39;, \u0026#39;Glenn\u0026#39;, \u0026#39;Sally\u0026#39;] for friend in friends: print(\u0026#39;Happy New Year:\u0026#39;, friend) print(\u0026#39;Done!\u0026#39;) Some looping examples ‚ûø   Counting the number of items\ncount = 0 for itervar in [3, 41, 12, 9, 74, 15]: count = count + 1 print(\u0026#39;Count: \u0026#39;, count)   Total of a set of numbers\ntotal = 0 for itervar in [3, 41, 12, 9, 74, 15]: total = total + itervar print(\u0026#39;Total: \u0026#39;, total)   Finding the largest value in a sequence\nlargest = None for itervar in [3, 41, 12, 9, 74, 15]: if largest is None or itervar \u0026gt; largest : largest = itervar print(\u0026#39;Largest:\u0026#39;, largest)   Function to find the minimum\ndef min(values): smallest = None for value in values: if smallest is None or value \u0026lt; smallest: smallest = value return smallest   Debugging sugestion  Debugging by bisection.  Break a problem in half and add a print statement to check. If the mid-point check is incorrect, the problem must be in the first half of the program. If it is correct, the problem is in the second half. Bisect the selection. So on\u0026hellip;    Exercises My solutions\n  Reads numbers until done; print total, count, and average:\ntotal = 0 count = 0 average = 0 while True: inp = input(\u0026#39;Enter a number: \u0026#39;) if inp == \u0026#39;done\u0026#39;: break else: try: num = float(inp) except: print(\u0026#39;Invalid input\u0026#39;) continue total = total + num count = count + 1 average = total / count print(\u0026#39;Total:\u0026#39;, total, \u0026#39;Count:\u0026#39;, count, \u0026#39;Average:\u0026#39;,average)   Prints max and min as well:\nmax = None min = None while True: inp = input(\u0026#39;Enter a number: \u0026#39;) if inp == \u0026#39;done\u0026#39;: break else: try: num = float(inp) except: print(\u0026#39;Invalid input\u0026#39;) continue if max is None or num \u0026gt; max: max = num if min is None or num \u0026lt; min: min = num print(\u0026#39;Max:\u0026#39;, max, \u0026#39;Min:\u0026#39;, min)   ","permalink":"https://harshcurious.com/posts/pythoniteration/","summary":"The while loop It allows you to repeat a set of actions until a statement is true. Eg:\nn = 5 while n \u0026gt; 0: print(n) n = n - 1 print(\u0026#39;Blastoff!\u0026#39;) This is executed as follows\n Creates and sets n to 5. Goes to the while statement and checks if n is greater than 0. Right now it\u0026rsquo;s true, so we move inside the loop.  Prints n, ie outputs 5.","title":"How to Iterate in Python"},{"content":"What is a Function A function takes a set of inputs and produces an output. Eg:\n\u0026gt;\u0026gt;\u0026gt;type(32) \u0026lt;class \u0026#39;init\u0026#39;\u0026gt; Here type is a function that takes 32 as an input and produces its class.\nSome Built-in functions   max : gives the ‚Äúlargest character‚Äù in the string\n\u0026gt;\u0026gt;\u0026gt;max(\u0026#39;Hello world\u0026#39;) \u0026#39;w\u0026#39;   min : gives the ‚Äúsmallest character‚Äù in the string\n\u0026gt;\u0026gt;\u0026gt;min(\u0026#39;Hello world\u0026#39;) \u0026#39; \u0026#39;   len : gives the number of characters in the string\n\u0026gt;\u0026gt;\u0026gt;len(\u0026#39;Hello world\u0026#39;) 11   Type conversion functions\n int : takes any value and converts it to an integer, if it can, or complains otherwise \u0026gt;\u0026gt;\u0026gt;int(\u0026#39;32\u0026#39;) 32 \u0026gt;\u0026gt;\u0026gt;int(\u0026#39;Hello\u0026#39;) ValueError: invalid literal for int() with base 10: \u0026#39;Hello\u0026#39; \u0026gt;\u0026gt;\u0026gt;int(3.99999) 3 \u0026gt;\u0026gt;\u0026gt; int(-2.3) -2  float : takes integers and strings, and converts them to floating-point numbers \u0026gt;\u0026gt;\u0026gt; float(32) 32.0 \u0026gt;\u0026gt;\u0026gt; float(\u0026#39;3.14159\u0026#39;) 3.14159  str : converts its argument to a string \u0026gt;\u0026gt;\u0026gt; str(32) \u0026#39;32\u0026#39; \u0026gt;\u0026gt;\u0026gt; str(3.14159) \u0026#39;3.14159\u0026#39;     Math Functions\n Need to import it with the import math command. log_10 : logarithm in base 10 \u0026gt;\u0026gt;\u0026gt; ratio = signal_power / noise_power \u0026gt;\u0026gt;\u0026gt; decibels = 10 * math.log10(ratio)  pi \u0026gt;\u0026gt;\u0026gt; degrees = 45 \u0026gt;\u0026gt;\u0026gt; radians = degrees / 360.0 * 2 * math.pi  sin \u0026gt;\u0026gt;\u0026gt; math.sin(radians) 0.7071067811865476  sqrt \u0026gt;\u0026gt;\u0026gt; math.sqrt(2) / 2.0 0.7071067811865476     Random numbers\n  The random module provides functions that generate pseudorandom numbers\nimport random for i in range(10): x = random.random() print(x)   randint : takes two inputs and produces a random integer in the range\n\u0026gt;\u0026gt;\u0026gt; random.randint(5,10) 7 \u0026gt;\u0026gt;\u0026gt; random.randint(5,10) 10   choice : chooses an element from a sequence at random\n\u0026gt;\u0026gt;\u0026gt; t = [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; random.choice(t) 2 \u0026gt;\u0026gt;\u0026gt; random.choice(t) 3     Defining functions The defining feature of programming languages is their ability to have user defined functions.\nIn python we define functions in the following way:\nTo call the above function you just type\n\u0026gt;\u0026gt;\u0026gt; print_lyrics() I\u0026#39;m a lumberjack, and I\u0026#39;m okay. I sleep all night and I work all day. If you have defined a function A already in your code, you can use it inside a function B as long as function B comes after function A in the flow of execution.\nTo return a result from a function, we use the return statement in our function\ndef addtwo(a, b): added = a + b return added x = addtwo(3, 5) print(x) # Code: http://www.py4e.com/code3/addtwo.py void function: A function that does not return a value.\n\u0026gt;\u0026gt;\u0026gt; print(print_lyrics()) None \u0026gt;\u0026gt;\u0026gt; print(type(None)) \u0026lt;class \u0026#39;NoneType\u0026#39;\u0026gt; Why functions  name a group of statements; program easier to read, understand, and debug eliminates repetitive code; changes in one place debug the parts one at a time and then assemble them into a working whole well-designed functions are useful for many programs; write and debug once; reuse it  Exercise Solutions\nExercise 4 inpHours = input(\u0026#39;Enter Hours: \u0026#39;) try: hour = float(inpHours) except: print(\u0026#39;Error, please enter numeric input\u0026#39;) exit(0) inpRate = input(\u0026#39;Enter Rate: \u0026#39;) try: rate = float(inpRate) except: print(\u0026#39;Error, please enter numeric input\u0026#39;) exit(0) def computepay(h, r): if h \u0026lt;= 40 : pay = r * h else: pay = (r * 40) + (1.5*r*(h-40)) print(\u0026#39;Pay:\u0026#39;, pay) computepay(hour, rate) Exercise 5 inp = input(\u0026#39;Enter score: \u0026#39; ) try: s = float(inp) except : print(\u0026#39;Bad Score\u0026#39;) quit() def computegrade(score): if score \u0026gt; 1: return \u0026#39;Bad score\u0026#39; elif score \u0026gt;= 0.9: return \u0026#39;A\u0026#39; elif score \u0026gt;= 0.8: return \u0026#39;B\u0026#39; elif score \u0026gt;= 0.7: return \u0026#39;C\u0026#39; elif score \u0026gt;= 0.6: return \u0026#39;D\u0026#39; elif score \u0026gt;= 0: return \u0026#39;F\u0026#39; else: return \u0026#39;Bad score\u0026#39; grade = computegrade(s) print(grade) ","permalink":"https://harshcurious.com/posts/pythonfunction/","summary":"What is a Function A function takes a set of inputs and produces an output. Eg:\n\u0026gt;\u0026gt;\u0026gt;type(32) \u0026lt;class \u0026#39;init\u0026#39;\u0026gt; Here type is a function that takes 32 as an input and produces its class.\nSome Built-in functions   max : gives the ‚Äúlargest character‚Äù in the string\n\u0026gt;\u0026gt;\u0026gt;max(\u0026#39;Hello world\u0026#39;) \u0026#39;w\u0026#39;   min : gives the ‚Äúsmallest character‚Äù in the string\n\u0026gt;\u0026gt;\u0026gt;min(\u0026#39;Hello world\u0026#39;) \u0026#39; \u0026#39;   len : gives the number of characters in the string","title":"Learning Python: Functions"},{"content":"This post describes the creation process of this website. I have used the popular static site generator Hugo. Hugo is based on the language go. Disclaimer: this is the second time I am creating my website using Hugo. But the last time I created this was in 2015, so a lot has changed.\nInstalling Hugo on Windows 10 My recommendation is to use Chocolatey to install Hugo although there are binaries available at github for direct installation. If Chocolatey is installed on your system, open powershell by right clicking the start button. There type\nchococ install hugo to install Hugo. Now are ready to use Hugo commands from the powershell. To check if the installtion went well type hugo version. It will display the current version of Hugo.\nUsing Hugo One way to quickly learn how to use Hugo is to follow the quickstart guide over at the Hugo website. There is one problem, with the echo command, I encountered while applying it on Windows 10. For completeness I will describe all the steps involved.\nWe begin by creating a directory with the necessary structure for our website. I stated by creating a practice folder called quickstart using\nhugo new site quickstart Then type\ncd quickstart to move into the newly created directory.\nNext we add a theme to our website. We will add the Ananke theme using git.\ngit init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke More themes are available at themes.hugo.io. If you don\u0026rsquo;t have git installed you can also download the themes from there, and extract the compressed folder into the themes folder in your site\u0026rsquo;s directory. Using git is higly recommended.\nTake a look in the themes folder in your site\u0026rsquo;s directory. There should be a folder named ananke inside. Go back to the quickstart directory and open the config.toml file in your faourite text editor. I am using Atom. Add\ntheme = \u0026quot;ananke\u0026quot; to the end of your config file.\nNow your website is essentially ready. Let\u0026rsquo;s add our first post. Type the following command on the powershell\nhugo new posts/my-first-post.md This will create a markdownfile named my-first-post.md in the content\u0026gt;posts. Open it in a text editor. You will notice that the file already contains the following:\n--- title: \u0026quot;My First Post\u0026quot; date: 2021-02-27T16:42:29+05:30 draft: true --- The title is going to be the title of your blog post, date is the time when your file was created, and \u0026lsquo;draft\u0026rsquo; represents whether or no your post is published. Change draft to false when you are happy with the content.\nEven when draft is set to true, you can see how it will look on you website by typing the folloing in the powershell.\nhugo server -D image\nClick on the link displayed to see the current status of your website. Make your changes. Once you are happy with your changes, build your site by typing the following in your powershell\nhugo Your website is published in the public folder in your website directory.\nCreating your Website ","permalink":"https://harshcurious.com/posts/hugocreation/","summary":"This post describes the creation process of this website. I have used the popular static site generator Hugo. Hugo is based on the language go. Disclaimer: this is the second time I am creating my website using Hugo. But the last time I created this was in 2015, so a lot has changed.\nInstalling Hugo on Windows 10 My recommendation is to use Chocolatey to install Hugo although there are binaries available at github for direct installation.","title":"Creating This Website Using Hugo on Windows 10"},{"content":"My Failed Attempt at Setting Up This Website Using Franklin (On Windows) I will be using Franklin based on Julia because\n I wanted to learn Julia I wanted to use markdown (or somethng similar) with LaTeX support automatically I wanted to see if the promises of KaTeX rendering hold water Code highlighting was another bonus  Installing Julia on Windows 10 To do this I first installed Julia using Chocolatey with the command\n choco install julia \u0026ndash;confirm\n In reality I first used the official Julia insaller, but by default it installs Julia in a folder with the version number. This makes it really hard to add it to your PATH in the Powershell. Chocolatey on the other hand, handles it all for you and you can start using Julia by typing julia on the Powershell prompt. Also, updating Julia will be way easier, just run the command choco upgrade julia --confirm.\nSetting Up Atom to use as my markdown editor I have borrowed a lot of what I am sharing from these two wonderful resources 1 and 2.\nInstall (using the installer at Atom.io) and open Atom. Close all the welcome messages (after reading them if you feel like it). Click File \u0026raquo; Settings. Now go to the install option and search and install the following packages\n markdown-writer : improves the markdown editing process especially for static blogs markdown-preview-plus : provides real-time preview of markdown with LaTeX support language-markdown : Adds grammar support for Markdown, and smart context-aware behavior to lists autosave : protects your work by saving it periodically highlightselected : highlights occurance of the selected word linter-retextjs : gives feedback on your writing pandoc-convert : if you want to directly convert your markdown file into HTML auto-terminal-powershell : open powershell terminal in the current file\u0026rsquo;s directory wordcount : if you want to see the wordcount of your document  If you have never written in markdown before, this is an excellent resourse. I am using this markdownguide page as my reference for markdown syntax.\nInstalling Franklin First type julia in the powershell to get to the Julia prompt julia\u0026gt;. Them press ] to get to pkg, julia\u0026rsquo;s package manager. You prompt will change to (@v1.5) pkg\u0026gt;. Now type\nadd Franklin and Franklin package will be installed. Once this package is intalled, (optionally) install the NodeJS package\nadd NodeJS Now the nest commands on the official website are clearly for linux\nusing NodeJS run(`sudo $(npm_cmd())install highlight.js`) I wasn\u0026rsquo;t able to modify it to get it to work for me. This is the point where I gave up. My Node.js is in D directory whereas the julia directory is C. I will have to edit the NodeJS.jl file to make this work. I don\u0026rsquo;t wanna do that right now. Maybe someday I will get back to it. I did set up atom to use markdown which is great.\n","permalink":"https://harshcurious.com/posts/franklinfail/","summary":"My Failed Attempt at Setting Up This Website Using Franklin (On Windows) I will be using Franklin based on Julia because\n I wanted to learn Julia I wanted to use markdown (or somethng similar) with LaTeX support automatically I wanted to see if the promises of KaTeX rendering hold water Code highlighting was another bonus  Installing Julia on Windows 10 To do this I first installed Julia using Chocolatey with the command","title":"FranklinFail"}]