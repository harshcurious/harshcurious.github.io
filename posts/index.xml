<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on harshcurious</title><link>https://harshcurious.com/posts/</link><description>Recent content in Posts on harshcurious</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 25 Mar 2021 19:46:43 +0530</lastBuildDate><atom:link href="https://harshcurious.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Today I learnt 1</title><link>https://harshcurious.com/posts/til1/</link><pubDate>Thu, 25 Mar 2021 19:46:43 +0530</pubDate><guid>https://harshcurious.com/posts/til1/</guid><description/></item><item><title>My Experiments with Raspberry Pi: Part 1</title><link>https://harshcurious.com/posts/rpi20thmarch21/</link><pubDate>Sat, 20 Mar 2021 13:39:03 +0530</pubDate><guid>https://harshcurious.com/posts/rpi20thmarch21/</guid><description>Today I am going to run a 7 segment display off of raspberry pi 4.
The code I ran #!/usr/bin/env python import RPi.GPIO as GPIO import time pins = [11,12,13,15,16,18,22,7] dats = [0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71,0x80] def setup(): GPIO.setmode(GPIO.BOARD) for pin in pins: GPIO.setup(pin, GPIO.OUT) # Set pin mode as output GPIO.output(pin, GPIO.LOW) def writeOneByte(val): GPIO.output(11, val &amp;amp; (0x01 &amp;lt;&amp;lt; 0)) GPIO.output(12, val &amp;amp; (0x01 &amp;lt;&amp;lt; 1)) GPIO.output(13, val &amp;amp; (0x01 &amp;lt;&amp;lt; 2)) GPIO.</description></item><item><title>Kolmogorov Arnold Representation Theorem</title><link>https://harshcurious.com/posts/mathneuralnetwork/</link><pubDate>Wed, 17 Mar 2021 14:59:43 +0530</pubDate><guid>https://harshcurious.com/posts/mathneuralnetwork/</guid><description>The most surprizing aspect of neural networks is their simplicity. I don&amp;rsquo;t mean that the whole of a neural network is simple. It is not. But at any given instant you are either adding numbers or applying a function on one number (a single variable function). Why these two kinds of operations will give you any old function of multiple variables is a mystry to me! Let me take a small step towards understanding this by reading this really old paper by Kolmogrov.</description></item><item><title>Let's get Go-ing</title><link>https://harshcurious.com/posts/gointro/</link><pubDate>Mon, 08 Mar 2021 22:04:51 +0530</pubDate><guid>https://harshcurious.com/posts/gointro/</guid><description>Why Go? Computer evolution more cores programming languages based on one core programming Programming workflow evolution not written by single developer written at different times programmers write library or package to be used elsewhere open source code needs to be shared Go rethinks object-oriented development allows for code reuse let&amp;rsquo;s you use all cores no need to recompile evrytime. Learn concurrency model fast compiler syntax type system concurrency channels testing, etc How Modern programming challenges Go away Currently choice between rapid development : Ruby, python fast execution : C, C++.</description></item><item><title>First look at Go In Action</title><link>https://harshcurious.com/posts/gofirstlook/</link><pubDate>Mon, 08 Mar 2021 21:12:59 +0530</pubDate><guid>https://harshcurious.com/posts/gofirstlook/</guid><description>Foreward Created by Rob Pike, Robert Griesmier, and Ken Thompson other contributions include UNIX, Java&amp;rsquo;s JVM Hotspot, Strontalk, UTF8 Open-sourse 2013: Gopher Academy; building community around Go. Go discussion board (slack) Gopher Academy blog GopherCon Go In Action Preface Began as GoingGo.net blog Member of founding team of Go reviewed suggested changes shared expertise Community effort ever scince About the Book Go is simple makes simple reliable and efficient software ides from existing languages unique and simple balances low-level language features, and high-level language features Book For intermediate level Requires experince with programming Goal intensive comprehensive idiomatic Focus on both specification, around implementation Topics include: syntax type system concurrency channel testing, etc Overview: Chapter 1 What is Go?</description></item><item><title>Microsoft Terminal: My Customizations</title><link>https://harshcurious.com/posts/microsoftterminal/</link><pubDate>Sun, 07 Mar 2021 15:17:14 +0530</pubDate><guid>https://harshcurious.com/posts/microsoftterminal/</guid><description>What is Microsoft Terminal?</description></item><item><title>What are Strings in Python</title><link>https://harshcurious.com/posts/pythonstrings/</link><pubDate>Sun, 07 Mar 2021 15:06:35 +0530</pubDate><guid>https://harshcurious.com/posts/pythonstrings/</guid><description>It&amp;rsquo;s a Sequence, a Sequence of Characters Can access the characters using the braket operator
&amp;gt;&amp;gt;&amp;gt; fruit = &amp;#39;banana&amp;#39; &amp;gt;&amp;gt;&amp;gt; letter = fruit[1] &amp;gt;&amp;gt;&amp;gt; print(letter) a You get that fruit[1] is a, the second letter in the string. Remeber counting starts from 0 in Python.
the number inside the bracket is called the index. Indeces can be negative. But index $\in [-length+1, length -1]$. len is the built-in function which gives the length of a string.</description></item><item><title>How to Iterate in Python</title><link>https://harshcurious.com/posts/pythoniteration/</link><pubDate>Thu, 04 Mar 2021 10:48:28 +0530</pubDate><guid>https://harshcurious.com/posts/pythoniteration/</guid><description>The while loop It allows you to repeat a set of actions until a statement is true. Eg:
n = 5 while n &amp;gt; 0: print(n) n = n - 1 print(&amp;#39;Blastoff!&amp;#39;) This is executed as follows
Creates and sets n to 5. Goes to the while statement and checks if n is greater than 0. Right now it&amp;rsquo;s true, so we move inside the loop. Prints n, ie outputs 5.</description></item><item><title>Learning Python: Functions</title><link>https://harshcurious.com/posts/pythonfunction/</link><pubDate>Wed, 03 Mar 2021 13:25:35 +0530</pubDate><guid>https://harshcurious.com/posts/pythonfunction/</guid><description>What is a Function A function takes a set of inputs and produces an output. Eg:
&amp;gt;&amp;gt;&amp;gt;type(32) &amp;lt;class &amp;#39;init&amp;#39;&amp;gt; Here type is a function that takes 32 as an input and produces its class.
Some Built-in functions max : gives the “largest character” in the string
&amp;gt;&amp;gt;&amp;gt;max(&amp;#39;Hello world&amp;#39;) &amp;#39;w&amp;#39; min : gives the “smallest character” in the string
&amp;gt;&amp;gt;&amp;gt;min(&amp;#39;Hello world&amp;#39;) &amp;#39; &amp;#39; len : gives the number of characters in the string</description></item><item><title>Creating This Website Using Hugo on Windows 10</title><link>https://harshcurious.com/posts/hugocreation/</link><pubDate>Sun, 28 Feb 2021 13:04:04 +0530</pubDate><guid>https://harshcurious.com/posts/hugocreation/</guid><description>This post describes the creation process of this website. I have used the popular static site generator Hugo. Hugo is based on the language go. Disclaimer: this is the second time I am creating my website using Hugo. But the last time I created this was in 2015, so a lot has changed.
Installing Hugo on Windows 10 My recommendation is to use Chocolatey to install Hugo although there are binaries available at github for direct installation.</description></item><item><title>FranklinFail</title><link>https://harshcurious.com/posts/franklinfail/</link><pubDate>Sat, 27 Feb 2021 17:56:37 +0530</pubDate><guid>https://harshcurious.com/posts/franklinfail/</guid><description>My Failed Attempt at Setting Up This Website Using Franklin (On Windows) I will be using Franklin based on Julia because
I wanted to learn Julia I wanted to use markdown (or somethng similar) with LaTeX support automatically I wanted to see if the promises of KaTeX rendering hold water Code highlighting was another bonus Installing Julia on Windows 10 To do this I first installed Julia using Chocolatey with the command</description></item></channel></rss>